name: PR Review Bot

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  id-token: write       # ✅ needed for OIDC login
  contents: read
  pull-requests: write  # ✅ allow posting PR comments

jobs:
  code-review:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step 2: Login to Azure (OIDC)
      - name: Azure Login
        uses: azure/login@v2
        with:
          auth-type: IDENTITY_FEDERATION
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Step 3: Generate git diff
      - name: Generate diff
        run: |
          git fetch origin main
          git diff origin/main...HEAD > diff.txt
          echo "Diff file size:"
          wc -l diff.txt

      # Step 4: Setup Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # Step 5: Install dependencies
      - name: Install requirements
        run: |
          python -m pip install --upgrade pip
          pip install openai PyGithub azure-identity

      # Step 6: Run Python CI script
      - name: Run OpenAI Review Script
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: python ci_script.py

      # Step 7: Post comment to PR (fallback, optional)
      - name: Post review comment fallback
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = 'review_comment.txt';
            if (fs.existsSync(path)) {
              const comment = fs.readFileSync(path, 'utf8');
              if (comment.trim()) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: comment
                });
              } else {
                console.log("No review comment generated, skipping PR comment.");
              }
            } else {
              console.log("review_comment.txt not found, skipping PR comment.");
            }

